{"remainingRequest":"/Users/brandonluy/Desktop/admin-website/node_modules/babel-loader/lib/index.js!/Users/brandonluy/Desktop/admin-website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brandonluy/Desktop/admin-website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brandonluy/Desktop/admin-website/src/components/ClientInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brandonluy/Desktop/admin-website/src/components/ClientInformation.vue","mtime":1639724274000},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/cache-loader/dist/cjs.js","mtime":1648530004744},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/babel-loader/lib/index.js","mtime":1648530005330},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/cache-loader/dist/cjs.js","mtime":1648530004744},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/vue-loader/lib/index.js","mtime":1648530005500}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClientInformation.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- Client Information page -->\n<template>\n  <div class=\"container\">\n      <!-- \"Client Information\" page header -->\n      <div style=\"padding-bottom:25px; padding-top:25px\">\n        <h1>Client Information</h1>\n      </div>\n      <div id=\"error-message\" style=\"color:red;padding-bottom:10px\">{{ errorMessage }}</div>\n      <div>\n        <b-card title=\"Contact Information\">\n            <b-card-text>\n                <strong>Client Name:</strong> {{ clientName }} <br>\n                <strong>Email Address:</strong> {{ clientEmail }} <br>\n                <strong>Phone Number:</strong> {{ clientPhoneNumber }} <br>\n                <strong>Location:</strong> {{ clientLocation }}\n            </b-card-text>\n            <b-button-toolbar>\n                <!-- Edit Button -->\n                <b-button-group>\n                    <b-button variant=\"primary\">\n                        <b-icon icon=\"pencil\"></b-icon>\n                        Edit\n                    </b-button>\n                </b-button-group>\n                <!-- Resend Confirmation Email Button -->\n                <b-button-group class=\"mx-1\">\n                    <b-button variant=\"outline-secondary\">\n                        <b-icon icon=\"envelope\"></b-icon>\n                        Resend Confirmation Email\n                    </b-button>\n                </b-button-group>\n            </b-button-toolbar>\n        </b-card>\n        <div style=\"padding-top:10px\"></div>\n        <b-card title=\"Test Package Enrollments\">\n            <div>{{testPackageEnrollments ? \"\" : \"This Client is not currently enrolled in any Test Packages.\"}}</div>\n            <md-table v-model=\"testPackageEnrollments\">\n                <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n                    <md-table-cell md-label=\"Name\" md-sort-by=\"name\"><router-link :to=\"`/testpackages/${item.testPackageId}`\" class=\"nav-link\">{{ item.testPackageName }}</router-link></md-table-cell>\n                    <md-table-cell md-label=\"Last Run\" md-sort-by=\"lastRun\"><router-link :to=\"`/clients/${clientId}/result/${item.testPackageId}`\" class=\"nav-link\">{{ processedTestResults[item.testPackageId]? processedTestResults[item.testPackageId].lastRun : \"-\" }}</router-link></md-table-cell>\n                </md-table-row>\n            </md-table>\n            <b-button-toolbar style=\"padding-top:25px\">\n                <!-- Add Test Package Enrollment Button -->\n                <b-button-group>\n                    <b-button variant=\"success\" @click=\"clickAddTestPackageEnrollment()\">\n                        <b-icon icon=\"plus-circle\"></b-icon>\n                        Add Test Package Enrollments\n                    </b-button>\n                </b-button-group>\n            </b-button-toolbar>\n        </b-card>\n        <div style=\"padding-bottom:50px\"></div>\n      </div>\n  </div>\n</template>\n\n<script>\n\n\nexport default {\n    name: 'ClientInformation',\n    components: {\n\n    },\n    data() {\n        return {\n            curSearch: \"\",\n            clientId: \"\",\n            clientName: \"\",\n            clientPhoneNumber: \"\",\n            clientEmail: \"\",\n            clientLocation: \"-\",\n            errorMessage: \"\",\n            testPackageEnrollments: [],\n            testResults: [],\n            processedTestResults: [],\n        }\n    },\n    mounted () {\n        // Get the client ID from the route.\n        const clientIdFromRoute = this.$route.params.clientid;\n\n        // If there aren't any Clients, call getClients() in case the user went directly to this\n        // link and the list of Clients has not been retrieved yet.\n        if (this.$store.state.clients.length == 0) {\n            this.$store.dispatch('getClients').then((result) => {\n              this.setDataFromState()\n            });\n        } else {\n          this.setDataFromState()\n        }\n        \n        // make a GET request to get the Test Package enrollments for the Client.\n        this.$store.dispatch('getClientTestPackageEnrollments', { clientId: clientIdFromRoute }).then((result) => {\n            this.testPackageEnrollments = this.$store.state.clientTestPackageEnrollment;\n            console.log(this.testPackageEnrollments);\n\n            // make a GET request to get the Test Results for the Client\n            this.$store.dispatch('getClientTestResults', { clientId: clientIdFromRoute }).then((result) => {\n                this.testResults = this.$store.state.clientTestResults;\n                console.log(this.testResults);\n                this.processTestResults();\n            })\n        });\n    },\n    props: {\n\n    },\n    computed: {\n\n    },\n    methods: {\n        setDataFromState() {\n            const clientIdFromRoute = this.$route.params.clientid;\n\n            // Get the Client by ID from the list of Clients stored in state.\n            const results = this.$store.state.clients.filter( function(client) {\n                if (client.id == clientIdFromRoute) {\n                    return client;\n                }\n            });\n\n            // Get the Client's information to display from the results above.\n            // If there were no results, display an error.\n            if (results && results.length > 0) {\n                this.clientId = results[0].id;\n                this.clientName = results[0].name;\n                this.clientEmail = results[0].email;\n                this.clientPhoneNumber = results[0].phoneNumber;\n            } else {\n                this.errorMessage = \"Error: Client does not exist.\"\n            }\n        },\n        processTestResults () {\n            \n            this.processedTestResults = [];\n\n            // do not process if we do not have test package enrollment information\n            if (this.testPackageEnrollments == null || this.testPackageEnrollments.length == 0) {\n                return;\n            }\n\n            // create an object for each Test Package enrollment that we can use to store information from results\n            for (let enrollment in this.testPackageEnrollments) {\n\n                const id = this.testPackageEnrollments[enrollment].testPackageId\n\n                const resultStructure = {\n                    testPackageId: id,\n                    testPackageName: this.testPackageEnrollments[enrollment].testPackageName,\n                    lastRun: \"-\",\n                    ping: [],\n                    traceroute: [],\n                    curl: [],\n                };\n\n                this.processedTestResults[id] = resultStructure;\n            }\n\n            // if there aren't any results, exit\n            if (this.testResults == null || this.testResults.length == 0) {\n                return;\n            }\n\n            // extract all the ping results \n            if (this.testResults.ping) {\n                for (let i = 0; i < this.testResults.ping.length; i++) {\n                    this.processedTestResults[this.testResults.ping[i].testPackageId].ping.push(this.testResults.ping[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.ping[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.ping[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].lastRun = this.testResults.ping[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.ping[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.ping[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.ping[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            // extract all the traceroute results\n            if (this.testResults.traceRoute) {\n                for (let i = 0; i < this.testResults.traceRoute.length; i++) {\n                    this.processedTestResults[this.testResults.traceRoute[i].testPackageId].traceroute.push(this.testResults.traceRoute[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.traceRoute[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.traceRoute[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.traceRoute[i].testPackageId].lastRun = this.testResults.traceRoute[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.traceRoute[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.traceRoute[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.traceRoute[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            // extract all the curl results\n            if (this.testResults.curl) {\n                for (let i = 0; i < this.testResults.curl.length; i++) {\n                    this.processedTestResults[this.testResults.curl[i].testPackageId].curl.push(this.testResults.curl[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.curl[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.curl[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.curl[i].testPackageId].lastRun = this.testResults.curl[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.curl[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.curl[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.curl[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            let latestTime = 0;\n            let clientCity = \"-\";\n            let clientState = \"-\";\n            let clientCountry = \"-\";\n            \n            // get the most recent Client location\n            for (let result in this.processedTestResults) {\n                try {\n                    let timeRun = Date.parse(this.processedTestResults[result].lastRun);\n                    let currentTimeRun = Date.parse(latestTime);\n                    if (timeRun != NaN) {\n                        if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                            latestTime = this.processedTestResults[result].lastRun;\n                            clientCity = this.processedTestResults[result].clientCity;\n                            clientState = this.processedTestResults[result].clientState;\n                            clientCountry = this.processedTestResults[result].clientCountry;\n                        } \n                    }\n                } finally {}\n            }\n            if (clientCity && clientState && clientCountry) {\n                this.clientLocation = clientCity + \", \" + clientState + \", \" + clientCountry;\n            } else {\n                this.clientLocation = \"-\";\n            }\n            console.log(this.clientLocation);\n\n        },\n        clickAddTestPackageEnrollment() {\n            const path = \"/clients/\" + this.clientId + \"/enrolltestpackage\";\n            this.$router.push({ path });\n        },\n    }\n}\n\n\n</script>"],"sourceRoot":"src/components"}]}