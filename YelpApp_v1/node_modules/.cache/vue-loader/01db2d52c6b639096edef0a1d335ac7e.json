{"remainingRequest":"/Users/brandonluy/Desktop/admin-website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brandonluy/Desktop/admin-website/src/components/ClientInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brandonluy/Desktop/admin-website/src/components/ClientInformation.vue","mtime":1639724274000},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/cache-loader/dist/cjs.js","mtime":1648530004744},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/thread-loader/dist/cjs.js","mtime":1648530004696},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/babel-loader/lib/index.js","mtime":1648530005330},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/cache-loader/dist/cjs.js","mtime":1648530004744},{"path":"/Users/brandonluy/Desktop/admin-website/node_modules/vue-loader/lib/index.js","mtime":1648530005500}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClientInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ClientInformation.vue","sourceRoot":"src/components","sourcesContent":["<!-- Client Information page -->\n<template>\n  <div class=\"container\">\n      <!-- \"Client Information\" page header -->\n      <div style=\"padding-bottom:25px; padding-top:25px\">\n        <h1>Client Information</h1>\n      </div>\n      <div id=\"error-message\" style=\"color:red;padding-bottom:10px\">{{ errorMessage }}</div>\n      <div>\n        <b-card title=\"Contact Information\">\n            <b-card-text>\n                <strong>Client Name:</strong> {{ clientName }} <br>\n                <strong>Email Address:</strong> {{ clientEmail }} <br>\n                <strong>Phone Number:</strong> {{ clientPhoneNumber }} <br>\n                <strong>Location:</strong> {{ clientLocation }}\n            </b-card-text>\n            <b-button-toolbar>\n                <!-- Edit Button -->\n                <b-button-group>\n                    <b-button variant=\"primary\">\n                        <b-icon icon=\"pencil\"></b-icon>\n                        Edit\n                    </b-button>\n                </b-button-group>\n                <!-- Resend Confirmation Email Button -->\n                <b-button-group class=\"mx-1\">\n                    <b-button variant=\"outline-secondary\">\n                        <b-icon icon=\"envelope\"></b-icon>\n                        Resend Confirmation Email\n                    </b-button>\n                </b-button-group>\n            </b-button-toolbar>\n        </b-card>\n        <div style=\"padding-top:10px\"></div>\n        <b-card title=\"Test Package Enrollments\">\n            <div>{{testPackageEnrollments ? \"\" : \"This Client is not currently enrolled in any Test Packages.\"}}</div>\n            <md-table v-model=\"testPackageEnrollments\">\n                <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n                    <md-table-cell md-label=\"Name\" md-sort-by=\"name\"><router-link :to=\"`/testpackages/${item.testPackageId}`\" class=\"nav-link\">{{ item.testPackageName }}</router-link></md-table-cell>\n                    <md-table-cell md-label=\"Last Run\" md-sort-by=\"lastRun\"><router-link :to=\"`/clients/${clientId}/result/${item.testPackageId}`\" class=\"nav-link\">{{ processedTestResults[item.testPackageId]? processedTestResults[item.testPackageId].lastRun : \"-\" }}</router-link></md-table-cell>\n                </md-table-row>\n            </md-table>\n            <b-button-toolbar style=\"padding-top:25px\">\n                <!-- Add Test Package Enrollment Button -->\n                <b-button-group>\n                    <b-button variant=\"success\" @click=\"clickAddTestPackageEnrollment()\">\n                        <b-icon icon=\"plus-circle\"></b-icon>\n                        Add Test Package Enrollments\n                    </b-button>\n                </b-button-group>\n            </b-button-toolbar>\n        </b-card>\n        <div style=\"padding-bottom:50px\"></div>\n      </div>\n  </div>\n</template>\n\n<script>\n\n\nexport default {\n    name: 'ClientInformation',\n    components: {\n\n    },\n    data() {\n        return {\n            curSearch: \"\",\n            clientId: \"\",\n            clientName: \"\",\n            clientPhoneNumber: \"\",\n            clientEmail: \"\",\n            clientLocation: \"-\",\n            errorMessage: \"\",\n            testPackageEnrollments: [],\n            testResults: [],\n            processedTestResults: [],\n        }\n    },\n    mounted () {\n        // Get the client ID from the route.\n        const clientIdFromRoute = this.$route.params.clientid;\n\n        // If there aren't any Clients, call getClients() in case the user went directly to this\n        // link and the list of Clients has not been retrieved yet.\n        if (this.$store.state.clients.length == 0) {\n            this.$store.dispatch('getClients').then((result) => {\n              this.setDataFromState()\n            });\n        } else {\n          this.setDataFromState()\n        }\n        \n        // make a GET request to get the Test Package enrollments for the Client.\n        this.$store.dispatch('getClientTestPackageEnrollments', { clientId: clientIdFromRoute }).then((result) => {\n            this.testPackageEnrollments = this.$store.state.clientTestPackageEnrollment;\n            console.log(this.testPackageEnrollments);\n\n            // make a GET request to get the Test Results for the Client\n            this.$store.dispatch('getClientTestResults', { clientId: clientIdFromRoute }).then((result) => {\n                this.testResults = this.$store.state.clientTestResults;\n                console.log(this.testResults);\n                this.processTestResults();\n            })\n        });\n    },\n    props: {\n\n    },\n    computed: {\n\n    },\n    methods: {\n        setDataFromState() {\n            const clientIdFromRoute = this.$route.params.clientid;\n\n            // Get the Client by ID from the list of Clients stored in state.\n            const results = this.$store.state.clients.filter( function(client) {\n                if (client.id == clientIdFromRoute) {\n                    return client;\n                }\n            });\n\n            // Get the Client's information to display from the results above.\n            // If there were no results, display an error.\n            if (results && results.length > 0) {\n                this.clientId = results[0].id;\n                this.clientName = results[0].name;\n                this.clientEmail = results[0].email;\n                this.clientPhoneNumber = results[0].phoneNumber;\n            } else {\n                this.errorMessage = \"Error: Client does not exist.\"\n            }\n        },\n        processTestResults () {\n            \n            this.processedTestResults = [];\n\n            // do not process if we do not have test package enrollment information\n            if (this.testPackageEnrollments == null || this.testPackageEnrollments.length == 0) {\n                return;\n            }\n\n            // create an object for each Test Package enrollment that we can use to store information from results\n            for (let enrollment in this.testPackageEnrollments) {\n\n                const id = this.testPackageEnrollments[enrollment].testPackageId\n\n                const resultStructure = {\n                    testPackageId: id,\n                    testPackageName: this.testPackageEnrollments[enrollment].testPackageName,\n                    lastRun: \"-\",\n                    ping: [],\n                    traceroute: [],\n                    curl: [],\n                };\n\n                this.processedTestResults[id] = resultStructure;\n            }\n\n            // if there aren't any results, exit\n            if (this.testResults == null || this.testResults.length == 0) {\n                return;\n            }\n\n            // extract all the ping results \n            if (this.testResults.ping) {\n                for (let i = 0; i < this.testResults.ping.length; i++) {\n                    this.processedTestResults[this.testResults.ping[i].testPackageId].ping.push(this.testResults.ping[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.ping[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.ping[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].lastRun = this.testResults.ping[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.ping[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.ping[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.ping[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            // extract all the traceroute results\n            if (this.testResults.traceRoute) {\n                for (let i = 0; i < this.testResults.traceRoute.length; i++) {\n                    this.processedTestResults[this.testResults.traceRoute[i].testPackageId].traceroute.push(this.testResults.traceRoute[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.traceRoute[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.traceRoute[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.traceRoute[i].testPackageId].lastRun = this.testResults.traceRoute[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.traceRoute[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.traceRoute[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.traceRoute[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            // extract all the curl results\n            if (this.testResults.curl) {\n                for (let i = 0; i < this.testResults.curl.length; i++) {\n                    this.processedTestResults[this.testResults.curl[i].testPackageId].curl.push(this.testResults.curl[i]);\n                    \n                    // determine if this test has the most recent time for the Test Package.\n                    try {\n                        let timeRun = Date.parse(this.testResults.curl[i].timeResultsReceived);\n                        let currentTimeRun = Date.parse(this.processedTestResults[this.testResults.curl[i].testPackageId].lastRun);\n                        if (timeRun != NaN) {\n                            if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                                this.processedTestResults[this.testResults.curl[i].testPackageId].lastRun = this.testResults.curl[i].timeResultsReceived;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCity = this.testResults.curl[i].clientCity;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientState = this.testResults.curl[i].clientState;\n                                this.processedTestResults[this.testResults.ping[i].testPackageId].clientCountry = this.testResults.curl[i].clientCountry;\n                            } \n                        }\n                    } finally {}\n                }\n            }\n\n            let latestTime = 0;\n            let clientCity = \"-\";\n            let clientState = \"-\";\n            let clientCountry = \"-\";\n            \n            // get the most recent Client location\n            for (let result in this.processedTestResults) {\n                try {\n                    let timeRun = Date.parse(this.processedTestResults[result].lastRun);\n                    let currentTimeRun = Date.parse(latestTime);\n                    if (timeRun != NaN) {\n                        if (isNaN(currentTimeRun) || (timeRun > currentTimeRun)) {\n                            latestTime = this.processedTestResults[result].lastRun;\n                            clientCity = this.processedTestResults[result].clientCity;\n                            clientState = this.processedTestResults[result].clientState;\n                            clientCountry = this.processedTestResults[result].clientCountry;\n                        } \n                    }\n                } finally {}\n            }\n            if (clientCity && clientState && clientCountry) {\n                this.clientLocation = clientCity + \", \" + clientState + \", \" + clientCountry;\n            } else {\n                this.clientLocation = \"-\";\n            }\n            console.log(this.clientLocation);\n\n        },\n        clickAddTestPackageEnrollment() {\n            const path = \"/clients/\" + this.clientId + \"/enrolltestpackage\";\n            this.$router.push({ path });\n        },\n    }\n}\n\n\n</script>"]}]}